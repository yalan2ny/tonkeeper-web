/* tslint:disable */
/* eslint-disable */
/**
 * Custodial-Battery REST API.
 * REST API for Custodial Battery which provides gas to different networks to help execute transactions.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RechargeMethodsMethodsInner
 */
export interface RechargeMethodsMethodsInner {
    /**
     * 
     * @type {string}
     * @memberof RechargeMethodsMethodsInner
     */
    image?: string;
    /**
     * 
     * @type {string}
     * @memberof RechargeMethodsMethodsInner
     */
    jettonMaster?: string;
    /**
     * 
     * @type {string}
     * @memberof RechargeMethodsMethodsInner
     */
    minBootstrapValue?: string;
    /**
     * 
     * @type {string}
     * @memberof RechargeMethodsMethodsInner
     */
    type: RechargeMethodsMethodsInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RechargeMethodsMethodsInner
     */
    rate: string;
    /**
     * 
     * @type {string}
     * @memberof RechargeMethodsMethodsInner
     */
    symbol: string;
    /**
     * 
     * @type {number}
     * @memberof RechargeMethodsMethodsInner
     */
    decimals: number;
    /**
     * 
     * @type {boolean}
     * @memberof RechargeMethodsMethodsInner
     */
    supportGasless: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RechargeMethodsMethodsInner
     */
    supportRecharge: boolean;
}


/**
 * @export
 */
export const RechargeMethodsMethodsInnerTypeEnum = {
    Jetton: 'jetton',
    Ton: 'ton'
} as const;
export type RechargeMethodsMethodsInnerTypeEnum = typeof RechargeMethodsMethodsInnerTypeEnum[keyof typeof RechargeMethodsMethodsInnerTypeEnum];


/**
 * Check if a given object implements the RechargeMethodsMethodsInner interface.
 */
export function instanceOfRechargeMethodsMethodsInner(value: object): value is RechargeMethodsMethodsInner {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('rate' in value) || value['rate'] === undefined) return false;
    if (!('symbol' in value) || value['symbol'] === undefined) return false;
    if (!('decimals' in value) || value['decimals'] === undefined) return false;
    if (!('supportGasless' in value) || value['supportGasless'] === undefined) return false;
    if (!('supportRecharge' in value) || value['supportRecharge'] === undefined) return false;
    return true;
}

export function RechargeMethodsMethodsInnerFromJSON(json: any): RechargeMethodsMethodsInner {
    return RechargeMethodsMethodsInnerFromJSONTyped(json, false);
}

export function RechargeMethodsMethodsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): RechargeMethodsMethodsInner {
    if (json == null) {
        return json;
    }
    return {
        
        'image': json['image'] == null ? undefined : json['image'],
        'jettonMaster': json['jetton_master'] == null ? undefined : json['jetton_master'],
        'minBootstrapValue': json['min_bootstrap_value'] == null ? undefined : json['min_bootstrap_value'],
        'type': json['type'],
        'rate': json['rate'],
        'symbol': json['symbol'],
        'decimals': json['decimals'],
        'supportGasless': json['support_gasless'],
        'supportRecharge': json['support_recharge'],
    };
}

  export function RechargeMethodsMethodsInnerToJSON(json: any): RechargeMethodsMethodsInner {
      return RechargeMethodsMethodsInnerToJSONTyped(json, false);
  }

  export function RechargeMethodsMethodsInnerToJSONTyped(value?: RechargeMethodsMethodsInner | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'image': value['image'],
        'jetton_master': value['jettonMaster'],
        'min_bootstrap_value': value['minBootstrapValue'],
        'type': value['type'],
        'rate': value['rate'],
        'symbol': value['symbol'],
        'decimals': value['decimals'],
        'support_gasless': value['supportGasless'],
        'support_recharge': value['supportRecharge'],
    };
}

