/* tslint:disable */
/* eslint-disable */
/**
 * Custodial-Battery REST API.
 * REST API for Custodial Battery which provides gas to different networks to help execute transactions.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RechargeMethodsMethodsInner } from './RechargeMethodsMethodsInner';
import {
    RechargeMethodsMethodsInnerFromJSON,
    RechargeMethodsMethodsInnerFromJSONTyped,
    RechargeMethodsMethodsInnerToJSON,
    RechargeMethodsMethodsInnerToJSONTyped,
} from './RechargeMethodsMethodsInner';

/**
 * 
 * @export
 * @interface RechargeMethods
 */
export interface RechargeMethods {
    /**
     * 
     * @type {Array<RechargeMethodsMethodsInner>}
     * @memberof RechargeMethods
     */
    methods: Array<RechargeMethodsMethodsInner>;
}

/**
 * Check if a given object implements the RechargeMethods interface.
 */
export function instanceOfRechargeMethods(value: object): value is RechargeMethods {
    if (!('methods' in value) || value['methods'] === undefined) return false;
    return true;
}

export function RechargeMethodsFromJSON(json: any): RechargeMethods {
    return RechargeMethodsFromJSONTyped(json, false);
}

export function RechargeMethodsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RechargeMethods {
    if (json == null) {
        return json;
    }
    return {
        
        'methods': ((json['methods'] as Array<any>).map(RechargeMethodsMethodsInnerFromJSON)),
    };
}

  export function RechargeMethodsToJSON(json: any): RechargeMethods {
      return RechargeMethodsToJSONTyped(json, false);
  }

  export function RechargeMethodsToJSONTyped(value?: RechargeMethods | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'methods': ((value['methods'] as Array<any>).map(RechargeMethodsMethodsInnerToJSON)),
    };
}

